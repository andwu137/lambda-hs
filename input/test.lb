s = \f -> \g -> \x -> f (g x) x;
k = \x -> \y -> x;
i = \x -> x;
y = \f -> (\x -> f (x x)) (\x -> f (x x));

joinArrow = \f x -> f x x;
flip f x y = f y x;

(~$) f x = f x;
(.) f g x = f (g x);

seq x y = k y ~(x);

{- module List -}
nil t d = d;

cons x y t d = t x y;
embedList f c t d = c (\x y -> t x (f y)) d;

cataL f d l = l (\x y -> cataL f ~(f x d) y) d;
cataR f d l = l (\x y -> f x (cataR f d y)) d;
anaR c i = embedList (anaR c) (c i);

hylo i c f d = cataL f d ~$ anaR c i;
{- end List -}

range start end step = hylo start (\x -> if (end x) nil ~$ cons x (step x));

range' start end step bin def =
    let next = range (step start) end step bin def;
        binNext = bin start next;;
    if (end start) def binNext;

fac = \x ->
    if (x==0)
        1
        (x * fac (x-1));

fac' n = range n (<=1) (-1) (*) 1;

fib = fibHelper 0 1;
fibHelper = \x -> \y -> \n -> if (n==0) x ~$ fibHelper y (x+y) (n-1);

fib' x =
    if (x==0) 0 ~$
    if (x==1) 1 ~$
    fib' (x-1) + fib' (x-2);

fib'' f g x =
    if (x==0) 0 ~$
    if (x==1) 1 ~$
    f (x-1) + g (x-2);

fib''' = joinArrow fib'';

fib'''' = y fib''';
