s = \f -> \g -> \x -> f (g x) x;
k = \x -> \y -> x;
i = \x -> x;
y = \f -> (\x -> f (x x)) (\x -> f (x x));

joinArrow = \f x -> f x x;
flip f x y = f y x;

(~$) f x = f x;
(.) f g x = f (g x);

seq x y = k y ~(x);

negate = (0-);

{- module List -}
List := Nil
    | Cons h t;

isNil l = l True (k . k False);

head d l = l d k;
tail d l = l d (flip k);

embedList l f d t = l d ~$ \x y -> t x (f y);

map f = cataR ListNil (ListCons . f);
cataL d f l = l d ~$ \x y -> cataL ~(f d x) f y;
cataR d f l = l d ~$ \x y -> f x (cataR d f y);
anaR i c = embedList (c i) (flip anaR c);

printList = cataL Unit (k print);

hylo i c d f = cataR d f ~$ anaR i c;
{- end List -}

{- module Maybe -}
Maybe := Nothing
    | Just a;

isJust m = m False (k True);
isNothing m = m True (k False);

fromMaybe d m = m d i;
mapMaybe f m d = m d f;
bindMaybe m f d = m d (fromMaybe d . f);
{- end Maybe -}

safeDiv x y = if (y==0) MaybeNothing ~$ MaybeJust (x/y);

range start end step = anaR start ~$ \x -> if (end x) ListNil ~$ ListCons x (step x);

product = cataL 1 (*);
sum = cataL 0 (+);

fac = \x ->
    if (x==0)
        1
        (x * fac (x-1));

fac' n = product ~$ range n (<=1) (-1);

fib = fibHelper 0 1;
fibHelper = \x -> \y -> \n -> if ~(n==0) x ~$ fibHelper y ~(x+y) ~(n-1);

fib' x =
    if (x==0) 0 ~$
    if (x==1) 1 ~$
    fib' ~(x-1) + fib' ~(x-2);

fib'' f g x =
    if (x==0) 0 ~$
    if (x==1) 1 ~$
    f ~(x-1) + g ~(x-2);

fib''' = joinArrow fib'';

fib'''' = y fib''';
